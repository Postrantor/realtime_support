#!/usr/bin/env python3
# Copyright 2015 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse  # 导入argparse库 (Import the argparse library)
import matplotlib.pyplot as pyplot  # 导入matplotlib.pyplot库，用于绘图 (Import the matplotlib.pyplot library for plotting)
import numpy  # 导入numpy库，用于数组操作 (Import the numpy library for array operations)

def main():
    parser = argparse.ArgumentParser(description='Plot rttest output')  # 创建一个命令行参数解析器 (Create an argument parser)
    
    # 添加命令行参数 (Add command line arguments)
    parser.add_argument('filename', metavar='filename')
    parser.add_argument('-s', '--show', help='Show plots', action='store_true')
    parser.add_argument('-o', '--outfile',
                        help='Name of file to write plot output')
    
    args = parser.parse_args()  # 解析命令行参数 (Parse the command line arguments)
    filename = args.filename
    show = args.show
    outfile = filename + '_plot'
    if args.outfile is not None:
        outfile = args.outfile

    rawlines = []

    with open(filename) as f:  # 读取文件内容 (Read the file content)
        rawlines = f.readlines()
        
    # 处理每一行的数据 (Process each line of data)
    rawlines = [line.rstrip().split(' ') for line in rawlines]
    array = numpy.array(rawlines)
    
    # 时间和延迟的单位是纳秒 (Units for time and latency are nanoseconds)
    time = array[1:, 1].astype(int)
    time = time - time[0]
    latency = numpy.absolute(array[1:, 2].astype(int))
    min_pagefaults = array[1:, 3].astype(int)
    maj_pagefaults = array[1:, 4].astype(int)
    
    # 绘制延迟与时间的图像 (Plot the latency vs. time graph)
    pyplot.figure(1)
    pyplot.plot(time, latency)
    pyplot.title('Scheduling latency vs. time for: ' + filename)
    pyplot.xlabel('Time (ns)')
    pyplot.ylabel('Latency (ns)')
    pyplot.savefig(outfile + '_latency.svg')
    if show:
        pyplot.show()
        
    # 绘制次要页面错误与时间的图像 (Plot the minor pagefaults vs. time graph)
    pyplot.figure(2)
    pyplot.plot(time, min_pagefaults)
    pyplot.title('Minor pagefaults vs. time for: ' + filename)
    pyplot.xlabel('Time (ns)')
    pyplot.ylabel('Minor pagefaults')
    pyplot.savefig(outfile + '_minflt.svg')

    if show:
        pyplot.show()
        
    # 绘制主要页面错误与时间的图像 (Plot the major pagefaults vs. time graph)
    pyplot.figure(3)
    pyplot.plot(time, maj_pagefaults)
    pyplot.title('Major pagefaults vs. time for: ' + filename)
    pyplot.xlabel('Time (ns)')
    pyplot.ylabel('Major pagefaults')
    pyplot.savefig(outfile + '_majflt.svg')
    if show:
        pyplot.show()

    # 创建延迟直方图 (Create a latency histogram)
    pyplot.figure(4)
    pyplot.hist(latency, bins=100)
    pyplot.title('Latency histogram')
    pyplot.xlabel('Latency (ns)')
    pyplot.ylabel('Frequency')
    pyplot.savefig(outfile + '_latency_hist.svg')
    if show:
        pyplot.show()

if __name__ == '__main__':
    main()
